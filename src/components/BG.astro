<div class="bg">
  <div class="overlay"></div>
  <canvas width="160" height="120" id="bg"></canvas>
</div>

<style>
  .bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(12, 113, 57, .02);
    z-index: -1;
  }
  .bg .overlay {
    position: absolute;
    top: 0;
    left: 50%;
    width: 100%;
    max-width: 1400px;
    height: 100%;
    background: linear-gradient(to left, rgba(255, 255, 255, 0) 0%, #fff 30%, #fff 70%, rgba(255, 255, 255, 0) 100%);
    transform: translate(-50%, 0);
    transition: opacity 400ms;
    z-index: 1;
  }
  .bg canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    z-index: 0;
  }
  @media screen and (max-width: 750px) {
    .bg .overlay {
      opacity: 0;
    }
    .bg canvas {
      opacity: .3;
    }
  }
</style>

<script>
(() => {
  const canvas = document.querySelector(".bg canvas") as HTMLCanvasElement
  const ctx = canvas?.getContext("2d")
  if(ctx === null) return

  const rand: (max: number) => number = (max) => Math.floor(Math.random() * max)

  //ctx.fillStyle = "rgba(13, 168, 82, .02)";
  for(let i=0; i<80; i++){
    const top = rand(canvas.height + 20) - 10
    const left = rand(canvas.width + 20) - 10
    const circleSize = rand(30) + 5

    ctx.beginPath();
    ctx.fillStyle = `rgba(${0+rand(30)}, ${100+rand(100)}, ${50+rand(100)}, .02)`;
    ctx.arc(left - 10, top, circleSize, 0, 2 * Math.PI, false)
    ctx.fill();
    ctx.closePath();
  }
})()
</script>
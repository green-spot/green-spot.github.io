---
import Loading from "./Loading.astro"
---

<form action="#" method="post" id="inquiry-form">
  <dl>
    <dt><label for="name-input">お名前</label></dt>
    <dd><input type="text" name="name" id="name-input" required></dd>
    <dt><label for="email-input">メールアドレス</label></dt>
    <dd><input type="email" name="email" id="email-input" required></dd>
    <dt><label for="message-textarea">お問い合わせ内容</label></dt>
    <dd><textarea name="message" id="message-textarea" required></textarea></dd>
  </dl>

  <div class="button">
    <button type="submit">送信する</button>
    <Loading />
  </div>
</form>

<style>
  dl {
    max-width: 600px;
    margin: 0 auto;
  }

  dl dt {
    color: #000;
    font-weight: normal;
  }

  dl dt:not(:first-child) {
    margin-top: 20px;
  }

  dl dd {
    margin-top: 5px;
  }

  dl dd input,
  dl dd textarea {
    width: 100%;
    height: 40px;
    padding: 0 15px;
    border: 1px solid #888;
    border-radius: 3px;
    background-color: #f8f8f8;
  }

  dl dd textarea {
    height: 160px;
    padding: 10px 15px;
  }

  .button {
    margin: 40px 0 0;
    text-align: center;
  }

  .button button {
    width: 240px;
    height: 50px;
    border-radius: 3px;
    color: #fff;
    font-size: 18px;
    background-color: var(--main-color-dark);
  }

  .button button.hide {
    display: none;
  }

  .button button:hover {
    background-color: var(--main-color)
  }
</style>

<script>
  (() => {
    const ResponseStatus = {
      success: "100",
      error: "0",
      nameEmptyError: "200",
      nameValidationError: "201",
      emailEmptyError: "202",
      emailValidationError: "203",
      messageEmptyError: "204",
      messageValidationError: "205",
    }

    const formUrl = "https://mail-form-miapdyvouq-dt.a.run.app/send-mail"
    const form = document.getElementById("inquiry-form")
    if(form === null) return

    const showLoading = () => {
      (form.querySelector(".loading") as HTMLDivElement).classList.add("show")
    }

    const hideSubmitButton = () => {
      (form.querySelector(".button button") as HTMLButtonElement).classList.add("hide")
    }

    const hideLoading = () => {
      (form.querySelector(".loading") as HTMLDivElement).classList.remove("show")
    }

    const showSubmitButton = () => {
      (form.querySelector(".button button") as HTMLButtonElement).classList.remove("hide")
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      hideSubmitButton()
      showLoading()

      const formData = {
        name: (form.querySelector("[name='name']") as HTMLInputElement).value || "",
        email: (form.querySelector("[name='email']") as HTMLInputElement).value || "",
        message: (form.querySelector("[name='message']") as HTMLInputElement).value || ""
      }

      const res = await fetch(formUrl, {
        method: 'POST',
        mode: 'cors',
        cache: 'no-cache',
        credentials: 'same-origin',
        headers: {'Content-Type': 'application/json'},
        redirect: 'follow',
        referrerPolicy: 'no-referrer',
        body: JSON.stringify(formData)
      })

      hideLoading();

      switch(await res.text()){
      case ResponseStatus.success:
        alert("送信が完了しました。")
        break;

      case ResponseStatus.error:
        alert("server error")
        break;

      case ResponseStatus.nameEmptyError:
        alert("名前が入力されていません。")
        showSubmitButton()
        break;

      case ResponseStatus.nameValidationError:
        alert("名前が不正です。")
        showSubmitButton()
        break;

      case ResponseStatus.emailEmptyError:
        alert("メールアドレスが入力されていません。")
        showSubmitButton()
        break;

      case ResponseStatus.emailValidationError:
        alert("メールアドレスが不正です。")
        showSubmitButton()
        break;

      case ResponseStatus.messageEmptyError:
        alert("お問い合わせ内容が入力されていません。")
        showSubmitButton()
        break;
      }
    })
  })()
</script>